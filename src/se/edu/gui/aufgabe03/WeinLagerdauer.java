/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * W.java
 *
 * Created on 14.11.2011, 09:53:29
 */
package se.edu.gui.aufgabe03;

import java.awt.Color;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.BorderFactory;
import javax.swing.JSpinner;
import se.edu.gui.aufgabe03.diagramm.WeinBalkenDiagrammNurLegende;
import se.edu.gui.aufgabe03.diagramm.WeinBalkenDiagrammOhneLegende;

/**
 *
 * @author steeb
 */
public class WeinLagerdauer extends javax.swing.JFrame {

    /** Creates new form W */
    public WeinLagerdauer() {
        initComponents();
//        this.addWindowFocusListener(new WindowAdapter() {
//
//            @Override
//            public void windowGainedFocus(WindowEvent e) {
//                lagerdauerEinstellerContainer.requestFocusInWindow();
//                diagramm.requestFocusInWindow();
//                legende.requestFocusInWindow();
//            }
//        });
        ((JSpinner.DefaultEditor)(lagerdauerEinsteller.getEditor())).getTextField().addFocusListener(new FocusAdapter() {

            @Override
            public void focusGained(FocusEvent fe) {
                ((JSpinner.DefaultEditor)(lagerdauerEinsteller.getEditor())).getTextField().setBackground(((JSpinner.DefaultEditor)(lagerdauerEinsteller.getEditor())).getTextField().getBackground().darker());
            }

            @Override
            public void focusLost(FocusEvent fe) {
                ((JSpinner.DefaultEditor)(lagerdauerEinsteller.getEditor())).getTextField().setBackground(((JSpinner.DefaultEditor)(lagerdauerEinsteller.getEditor())).getTextField().getBackground().brighter());
            }
            
        });
        this.addKeyListener(new PlusMinusEvents());
        ((WeinBalkenDiagrammOhneLegende)this.diagramm).registerJSpinner(this.lagerdauerEinsteller);
        ((WeinBalkenDiagrammOhneLegende)this.diagramm).setLagerdauer(50);
        ((WeinBalkenDiagrammOhneLegende)this.diagramm).setJahrgang(2000);
        ((WeinBalkenDiagrammOhneLegende)this.diagramm).updateJSpinner();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lagerdauerEinstellerContainer = new javax.swing.JPanel();
        lagerdauerEinstellerLabel = new javax.swing.JLabel();
        lagerdauerEinsteller = new javax.swing.JSpinner();
        diagrammContainer = new javax.swing.JPanel();
        diagramm = new WeinBalkenDiagrammOhneLegende(2000, 15);
        legende = new WeinBalkenDiagrammNurLegende();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lagerdauerEinstellerContainer.setBackground(new java.awt.Color(204, 204, 204));
        lagerdauerEinstellerContainer.setLayout(new javax.swing.BoxLayout(lagerdauerEinstellerContainer, javax.swing.BoxLayout.LINE_AXIS));

        lagerdauerEinstellerLabel.setBackground(new java.awt.Color(204, 204, 204));
        lagerdauerEinstellerLabel.setText("Lagerdauer:");
        lagerdauerEinstellerContainer.add(lagerdauerEinstellerLabel);

        lagerdauerEinsteller.setModel(new javax.swing.SpinnerNumberModel(((WeinBalkenDiagrammOhneLegende)this.diagramm).getLagerdauer(), null, null, 1));
        lagerdauerEinsteller.setEditor(new javax.swing.JSpinner.NumberEditor(lagerdauerEinsteller, "#,##0.###"));
        //((NumberFormatter)((NumberEditor)this.lagerdauerEinsteller.getEditor()).getTextField().getFormatter()).setAllowsInvalid(false);
        lagerdauerEinsteller.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                aenderLagerdauerViaSpinner(evt);
            }
        });
        lagerdauerEinsteller.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                spinnerGetFocus(evt);
            }
        });
        lagerdauerEinstellerContainer.add(lagerdauerEinsteller);

        getContentPane().add(lagerdauerEinstellerContainer, java.awt.BorderLayout.PAGE_START);

        diagrammContainer.setLayout(new javax.swing.BoxLayout(diagrammContainer, javax.swing.BoxLayout.PAGE_AXIS));

        diagramm.setBackground(new java.awt.Color(204, 204, 204));
        diagramm.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        diagramm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                diagrammMouseClicked(evt);
            }
        });
        diagramm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                elementGetFocus(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                elementLostFocus(evt);
            }
        });

        javax.swing.GroupLayout diagrammLayout = new javax.swing.GroupLayout(diagramm);
        diagramm.setLayout(diagrammLayout);
        diagrammLayout.setHorizontalGroup(
            diagrammLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 902, Short.MAX_VALUE)
        );
        diagrammLayout.setVerticalGroup(
            diagrammLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 167, Short.MAX_VALUE)
        );

        diagrammContainer.add(diagramm);

        legende.setBackground(new java.awt.Color(204, 204, 204));
        legende.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                legendeMouseClicked(evt);
            }
        });
        legende.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                elementGetFocus(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                elementLostFocus(evt);
            }
        });

        javax.swing.GroupLayout legendeLayout = new javax.swing.GroupLayout(legende);
        legende.setLayout(legendeLayout);
        legendeLayout.setHorizontalGroup(
            legendeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 904, Short.MAX_VALUE)
        );
        legendeLayout.setVerticalGroup(
            legendeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 167, Short.MAX_VALUE)
        );

        diagrammContainer.add(legende);

        getContentPane().add(diagrammContainer, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void elementGetFocus(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_elementGetFocus
        evt.getComponent().setBackground(evt.getComponent().getBackground().darker());
    }//GEN-LAST:event_elementGetFocus

    private void elementLostFocus(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_elementLostFocus
        evt.getComponent().setBackground(evt.getComponent().getBackground().brighter());
    }//GEN-LAST:event_elementLostFocus

    private void spinnerGetFocus(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_spinnerGetFocus
        this.lagerdauerEinstellerContainer.setBorder(BorderFactory.createLineBorder(Color.green));
    }//GEN-LAST:event_spinnerGetFocus

    private void aenderLagerdauerViaSpinner(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_aenderLagerdauerViaSpinner
        int eingabe = Integer.parseInt(this.lagerdauerEinsteller.getValue().toString());
        if (eingabe > 50) {
            eingabe = 50;
            this.lagerdauerEinsteller.setValue(new Integer(eingabe));
        } else if (eingabe < 1) {
            eingabe = 1;
            this.lagerdauerEinsteller.setValue(new Integer(eingabe));
        }
        ((WeinBalkenDiagrammOhneLegende)this.diagramm).setLagerdauer(Integer.parseInt(this.lagerdauerEinsteller.getValue().toString()));
    }//GEN-LAST:event_aenderLagerdauerViaSpinner

    private void diagrammMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_diagrammMouseClicked
        diagramm.requestFocus();
    }//GEN-LAST:event_diagrammMouseClicked

    private void legendeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_legendeMouseClicked
        legende.requestFocus();
    }//GEN-LAST:event_legendeMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new WeinLagerdauer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel diagramm;
    private javax.swing.JPanel diagrammContainer;
    private javax.swing.JSpinner lagerdauerEinsteller;
    private javax.swing.JPanel lagerdauerEinstellerContainer;
    private javax.swing.JLabel lagerdauerEinstellerLabel;
    private javax.swing.JPanel legende;
    // End of variables declaration//GEN-END:variables

    class PlusMinusEvents extends KeyAdapter {

        @Override
        public void keyPressed(KeyEvent ke) {
            super.keyPressed(ke);
            System.out.println("key pressed");
            if (ke.getKeyChar() == KeyEvent.VK_PLUS)
                if (diagramm.hasFocus())
                    ((WeinBalkenDiagrammOhneLegende)diagramm).incLagerdauer();
                else if (legende.hasFocus())
                    legende.setVisible(false);
            else if (ke.getKeyChar() == KeyEvent.VK_MINUS)
                if (diagramm.hasFocus())
                    ((WeinBalkenDiagrammOhneLegende)diagramm).decLagerdauer();
                else if (legende.hasFocus())
                    legende.setVisible(true);
        }
        
    }

}

